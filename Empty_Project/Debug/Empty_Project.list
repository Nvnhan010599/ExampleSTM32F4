
Empty_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002bc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000454  0800045c  0001045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000454  08000454  0001045c  2**0
                  CONTENTS
  4 .ARM          00000000  08000454  08000454  0001045c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000454  0800045c  0001045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000454  08000454  00010454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000458  08000458  00010458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800045c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800045c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001045c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000852  00000000  00000000  0001048c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000267  00000000  00000000  00010cde  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000d8  00000000  00000000  00010f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a0  00000000  00000000  00011020  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000567  00000000  00000000  000110c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000015a8  00000000  00000000  00011627  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00060274  00000000  00000000  00012bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00072e43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001e0  00000000  00000000  00072ec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800043c 	.word	0x0800043c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800043c 	.word	0x0800043c

080001d8 <main>:

#include "main.h"


int main(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0

  while (1)
 80001dc:	e7fe      	b.n	80001dc <main+0x4>

080001de <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80001de:	b480      	push	{r7}
 80001e0:	af00      	add	r7, sp, #0
}
 80001e2:	bf00      	nop
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr

080001ec <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80001f0:	e7fe      	b.n	80001f0 <HardFault_Handler+0x4>

080001f2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80001f2:	b480      	push	{r7}
 80001f4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80001f6:	e7fe      	b.n	80001f6 <MemManage_Handler+0x4>

080001f8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80001fc:	e7fe      	b.n	80001fc <BusFault_Handler+0x4>

080001fe <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80001fe:	b480      	push	{r7}
 8000200:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000202:	e7fe      	b.n	8000202 <UsageFault_Handler+0x4>

08000204 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr

08000212 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000212:	b480      	push	{r7}
 8000214:	af00      	add	r7, sp, #0
}
 8000216:	bf00      	nop
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr

0800022e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0

}
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr

0800023c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <SystemInit+0x60>)
 8000242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000246:	4a15      	ldr	r2, [pc, #84]	; (800029c <SystemInit+0x60>)
 8000248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800024c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000250:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <SystemInit+0x64>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a12      	ldr	r2, [pc, #72]	; (80002a0 <SystemInit+0x64>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800025c:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <SystemInit+0x64>)
 800025e:	2200      	movs	r2, #0
 8000260:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000262:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <SystemInit+0x64>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <SystemInit+0x64>)
 8000268:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800026c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000270:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000272:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <SystemInit+0x64>)
 8000274:	4a0b      	ldr	r2, [pc, #44]	; (80002a4 <SystemInit+0x68>)
 8000276:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000278:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <SystemInit+0x64>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a08      	ldr	r2, [pc, #32]	; (80002a0 <SystemInit+0x64>)
 800027e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000282:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <SystemInit+0x64>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800028a:	f000 f80d 	bl	80002a8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800028e:	4b03      	ldr	r3, [pc, #12]	; (800029c <SystemInit+0x60>)
 8000290:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000294:	609a      	str	r2, [r3, #8]
#endif
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	e000ed00 	.word	0xe000ed00
 80002a0:	40023800 	.word	0x40023800
 80002a4:	24003010 	.word	0x24003010

080002a8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	2300      	movs	r3, #0
 80002b4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80002b6:	4b36      	ldr	r3, [pc, #216]	; (8000390 <SetSysClock+0xe8>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a35      	ldr	r2, [pc, #212]	; (8000390 <SetSysClock+0xe8>)
 80002bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002c0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80002c2:	4b33      	ldr	r3, [pc, #204]	; (8000390 <SetSysClock+0xe8>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ca:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d103      	bne.n	80002e0 <SetSysClock+0x38>
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80002de:	d1f0      	bne.n	80002c2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80002e0:	4b2b      	ldr	r3, [pc, #172]	; (8000390 <SetSysClock+0xe8>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d002      	beq.n	80002f2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80002ec:	2301      	movs	r3, #1
 80002ee:	603b      	str	r3, [r7, #0]
 80002f0:	e001      	b.n	80002f6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80002f2:	2300      	movs	r3, #0
 80002f4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d142      	bne.n	8000382 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002fc:	4b24      	ldr	r3, [pc, #144]	; (8000390 <SetSysClock+0xe8>)
 80002fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000300:	4a23      	ldr	r2, [pc, #140]	; (8000390 <SetSysClock+0xe8>)
 8000302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000306:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000308:	4b22      	ldr	r3, [pc, #136]	; (8000394 <SetSysClock+0xec>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a21      	ldr	r2, [pc, #132]	; (8000394 <SetSysClock+0xec>)
 800030e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000312:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000314:	4b1e      	ldr	r3, [pc, #120]	; (8000390 <SetSysClock+0xe8>)
 8000316:	4a1e      	ldr	r2, [pc, #120]	; (8000390 <SetSysClock+0xe8>)
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800031c:	4b1c      	ldr	r3, [pc, #112]	; (8000390 <SetSysClock+0xe8>)
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	4a1b      	ldr	r2, [pc, #108]	; (8000390 <SetSysClock+0xe8>)
 8000322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000326:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000328:	4b19      	ldr	r3, [pc, #100]	; (8000390 <SetSysClock+0xe8>)
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	4a18      	ldr	r2, [pc, #96]	; (8000390 <SetSysClock+0xe8>)
 800032e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000332:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000334:	4b16      	ldr	r3, [pc, #88]	; (8000390 <SetSysClock+0xe8>)
 8000336:	4a18      	ldr	r2, [pc, #96]	; (8000398 <SetSysClock+0xf0>)
 8000338:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <SetSysClock+0xe8>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a14      	ldr	r2, [pc, #80]	; (8000390 <SetSysClock+0xe8>)
 8000340:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000344:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000346:	bf00      	nop
 8000348:	4b11      	ldr	r3, [pc, #68]	; (8000390 <SetSysClock+0xe8>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d0f9      	beq.n	8000348 <SetSysClock+0xa0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */

#if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000354:	4b11      	ldr	r3, [pc, #68]	; (800039c <SetSysClock+0xf4>)
 8000356:	f240 7205 	movw	r2, #1797	; 0x705
 800035a:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <SetSysClock+0xe8>)
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	4a0b      	ldr	r2, [pc, #44]	; (8000390 <SetSysClock+0xe8>)
 8000362:	f023 0303 	bic.w	r3, r3, #3
 8000366:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <SetSysClock+0xe8>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	4a08      	ldr	r2, [pc, #32]	; (8000390 <SetSysClock+0xe8>)
 800036e:	f043 0302 	orr.w	r3, r3, #2
 8000372:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8000374:	bf00      	nop
 8000376:	4b06      	ldr	r3, [pc, #24]	; (8000390 <SetSysClock+0xe8>)
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	f003 030c 	and.w	r3, r3, #12
 800037e:	2b08      	cmp	r3, #8
 8000380:	d1f9      	bne.n	8000376 <SetSysClock+0xce>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40023800 	.word	0x40023800
 8000394:	40007000 	.word	0x40007000
 8000398:	07405419 	.word	0x07405419
 800039c:	40023c00 	.word	0x40023c00

080003a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a0:	480d      	ldr	r0, [pc, #52]	; (80003d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003a2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003a4:	f7ff ff4a 	bl	800023c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a8:	480c      	ldr	r0, [pc, #48]	; (80003dc <LoopForever+0x6>)
  ldr r1, =_edata
 80003aa:	490d      	ldr	r1, [pc, #52]	; (80003e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003ac:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <LoopForever+0xe>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b0:	e002      	b.n	80003b8 <LoopCopyDataInit>

080003b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b6:	3304      	adds	r3, #4

080003b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003bc:	d3f9      	bcc.n	80003b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c0:	4c0a      	ldr	r4, [pc, #40]	; (80003ec <LoopForever+0x16>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c4:	e001      	b.n	80003ca <LoopFillZerobss>

080003c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c8:	3204      	adds	r2, #4

080003ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003cc:	d3fb      	bcc.n	80003c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ce:	f000 f811 	bl	80003f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003d2:	f7ff ff01 	bl	80001d8 <main>

080003d6 <LoopForever>:

LoopForever:
    b LoopForever
 80003d6:	e7fe      	b.n	80003d6 <LoopForever>
  ldr   r0, =_estack
 80003d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e4:	0800045c 	.word	0x0800045c
  ldr r2, =_sbss
 80003e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003ec:	2000001c 	.word	0x2000001c

080003f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f0:	e7fe      	b.n	80003f0 <ADC_IRQHandler>
	...

080003f4 <__libc_init_array>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	4e0d      	ldr	r6, [pc, #52]	; (800042c <__libc_init_array+0x38>)
 80003f8:	4c0d      	ldr	r4, [pc, #52]	; (8000430 <__libc_init_array+0x3c>)
 80003fa:	1ba4      	subs	r4, r4, r6
 80003fc:	10a4      	asrs	r4, r4, #2
 80003fe:	2500      	movs	r5, #0
 8000400:	42a5      	cmp	r5, r4
 8000402:	d109      	bne.n	8000418 <__libc_init_array+0x24>
 8000404:	4e0b      	ldr	r6, [pc, #44]	; (8000434 <__libc_init_array+0x40>)
 8000406:	4c0c      	ldr	r4, [pc, #48]	; (8000438 <__libc_init_array+0x44>)
 8000408:	f000 f818 	bl	800043c <_init>
 800040c:	1ba4      	subs	r4, r4, r6
 800040e:	10a4      	asrs	r4, r4, #2
 8000410:	2500      	movs	r5, #0
 8000412:	42a5      	cmp	r5, r4
 8000414:	d105      	bne.n	8000422 <__libc_init_array+0x2e>
 8000416:	bd70      	pop	{r4, r5, r6, pc}
 8000418:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800041c:	4798      	blx	r3
 800041e:	3501      	adds	r5, #1
 8000420:	e7ee      	b.n	8000400 <__libc_init_array+0xc>
 8000422:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000426:	4798      	blx	r3
 8000428:	3501      	adds	r5, #1
 800042a:	e7f2      	b.n	8000412 <__libc_init_array+0x1e>
 800042c:	08000454 	.word	0x08000454
 8000430:	08000454 	.word	0x08000454
 8000434:	08000454 	.word	0x08000454
 8000438:	08000458 	.word	0x08000458

0800043c <_init>:
 800043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043e:	bf00      	nop
 8000440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000442:	bc08      	pop	{r3}
 8000444:	469e      	mov	lr, r3
 8000446:	4770      	bx	lr

08000448 <_fini>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	bf00      	nop
 800044c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044e:	bc08      	pop	{r3}
 8000450:	469e      	mov	lr, r3
 8000452:	4770      	bx	lr
